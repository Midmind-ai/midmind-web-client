/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log in into the system */
        post: operations["AuthController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log in into the system */
        post: operations["AuthController_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_signInWithGoogle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token */
        post: operations["AuthController_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout a user from the system */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user */
        get: operations["UserController_getCurrentUser"];
        /** Update current user */
        put: operations["UserController_updateCurrentUser"];
        post?: never;
        /** Delete current user */
        delete: operations["UserController_deleteCurrentUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users */
        get: operations["UserController_getAllUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a user by id */
        get: operations["UserController_getUserById"];
        /** Update user information */
        put: operations["UserController_updateUser"];
        post?: never;
        /** Delete a user */
        delete: operations["UserController_deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate a new conversation */
        post: operations["ConversationController_initiateConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all user not deleted chats */
        get: operations["ChatController_getUserChats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a chat data */
        put: operations["ChatController_updateChatData"];
        post?: never;
        /** Delete the chat */
        delete: operations["ChatController_deleteChat"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get chat messages */
        get: operations["MessageController_getChatMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages/{id}/thread-context": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get thread context by message id */
        get: operations["ThreadContextController_getThreadContextByMessage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SingInDto: {
            /** Format: email */
            email: string;
            password: string;
        };
        AccessTokenDto: {
            access_token: string;
        };
        SignUpDto: {
            first_name: string;
            password: string;
            confirmation_password: string;
            last_name: string;
            /** Format: email */
            email: string;
        };
        SignInWithGoogleDto: {
            code: string;
        };
        MessageDto: {
            message: string;
        };
        UserDto: {
            /** Format: uuid */
            id: string;
            /** Format: email */
            email: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            last_name: string;
            first_name: string;
            avatar: string | null;
        };
        UpdateUserDto: {
            first_name?: string;
            last_name?: string;
            /** Format: email */
            email?: string;
            password: string;
            confirmation_password: string;
            avatar?: string;
            is_online?: boolean;
            /** Format: date-time */
            last_seen?: string;
        };
        PaginationMetadata: {
            total: number;
            lastPage: number;
            currentPage: number;
            perPage: number;
            prev: number | null;
            next: number | null;
        };
        PaginatedResult: {
            data: unknown[][];
            meta: components["schemas"]["PaginationMetadata"];
        };
        CreateConversationResponseTitleDto: {
            title: string;
            chat_id: string;
            /** @enum {string} */
            type: "error" | "title" | "content" | "complete";
        };
        CreateConversationResponseContentDto: {
            id: string;
            body: string;
            /** @enum {string} */
            type: "error" | "title" | "content" | "complete";
        };
        CreateConversationResponseCompleteDto: {
            id: string;
            /** @enum {string} */
            type: "error" | "title" | "content" | "complete";
        };
        CreateConversationResponseErrorDto: {
            id: string;
            error: string;
            /** @enum {string} */
            type: "error" | "title" | "content" | "complete";
        };
        ConversationThreadContextDto: {
            /** Format: uuid */
            parent_chat_id: string;
            /** Format: uuid */
            parent_message_id: string;
            selected_text?: string;
            start_position?: number;
            end_position?: number;
            /** @enum {string} */
            connection_type: "attached" | "detached" | "temporary";
            /** @enum {string} */
            context_type: "full_message" | "text_selection";
        };
        CreateConversationDto: {
            /** Format: uuid */
            chat_id: string;
            /** Format: uuid */
            message_id: string;
            content: string;
            /** @enum {string} */
            model: "gemini-2.0-flash-lite" | "gemini-2.0-flash" | "gemini-2.5-flash" | "gemini-2.5-pro";
            thread_context?: components["schemas"]["ConversationThreadContextDto"];
        };
        ChatDto: {
            /** Format: uuid */
            id: string;
            name: string | null;
        };
        UpdateChatDto: {
            name?: string;
        };
        AppMessageThreadDto: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            child_chat_id: string;
            connection_type: string;
            connection_color: string;
            /** @enum {string} */
            context_type: "full_message" | "text_selection";
            end_position: number | null;
            start_position: number | null;
        };
        AppMessageDto: {
            /** Format: uuid */
            id: string;
            content: string;
            /** Format: date-time */
            created_at: string;
            /** @enum {string} */
            role: "model" | "user";
            llm_model: string | null;
            threads: components["schemas"]["AppMessageThreadDto"][];
        };
        ThreadContextByMessageIdDto: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            child_chat_id: string;
            connection_type: string;
            connection_color: string;
            /** @enum {string} */
            context_type: "full_message" | "text_selection";
            end_position: number | null;
            start_position: number | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SingInDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenDto"];
                };
            };
        };
    };
    AuthController_signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenDto"];
                };
            };
        };
    };
    AuthController_signInWithGoogle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInWithGoogleDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenDto"];
                };
            };
        };
    };
    AuthController_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenDto"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageDto"];
                };
            };
        };
    };
    UserController_getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    UserController_updateCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageDto"];
                };
            };
        };
    };
    UserController_deleteCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageDto"];
                };
            };
        };
    };
    UserController_getAllUsers: {
        parameters: {
            query?: {
                skip?: number;
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult"] & {
                        data?: components["schemas"]["UserDto"][];
                    };
                };
            };
        };
    };
    UserController_getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    UserController_updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageDto"];
                };
            };
        };
    };
    UserController_deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageDto"];
                };
            };
        };
    };
    ConversationController_initiateConversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateConversationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateConversationResponseTitleDto"] | components["schemas"]["CreateConversationResponseErrorDto"] | components["schemas"]["CreateConversationResponseContentDto"] | components["schemas"]["CreateConversationResponseCompleteDto"];
                };
            };
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChatController_getUserChats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatDto"][];
                };
            };
        };
    };
    ChatController_updateChatData: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateChatDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageDto"];
                };
            };
        };
    };
    ChatController_deleteChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageDto"];
                };
            };
        };
    };
    MessageController_getChatMessages: {
        parameters: {
            query?: {
                skip?: number;
                take?: number;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult"] & {
                        data?: components["schemas"]["AppMessageDto"][];
                    };
                };
            };
        };
    };
    ThreadContextController_getThreadContextByMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadContextByMessageIdDto"][];
                };
            };
        };
    };
}
